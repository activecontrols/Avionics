#include <arduino.h>
#define Tlm_length 10
volatile bool flagTlm = false;
volatile bool requestTlm = false;

struch TlmData(){
uint8_t temperature;
  uint16_t voltage;
  uint16_t current;
  uint16_t consumption;
  uint16_t rpm;
  bool crcCheck;
}
void readTlm();
uint16_t getRpm(); 
bool isTlmAvailable();
void resetTlmFlag();
void enableTlm();
void disableTlm();
uint8_t updateCrc8(uint8_t crc, uint8_t crc_seed);
uint8_t calculateCrc8(const uint8_t *Buf, const uint8_t BufLen);

void readTlm() {
  noInterrupts();
  if (isTlmAvailable()) {
    resetTlmFlag();
    interrupts();
    static uint8_t bufferTlm[TLM_LENGTH];
    while (Serial1.available() < TLM_LENGTH);

    for (int i = 0; i < TLM_LENGTH; i++) {
      bufferTlm[i] = Serial1.read();
    }
    tlmData.temperature = bufferTlm[0];
    tlmData.voltage = (bufferTlm[1] << 8) | bufferTlm[2];
    tlmData.current = (bufferTlm[3] << 8) | bufferTlm[4];
    tlmData.consumption = (bufferTlm[5] << 8) | bufferTlm[6];
    tlmData.rpm = (bufferTlm[7] << 8) | bufferTlm[8];
    tlmData.crc_8 = (bufferTlm[9] == calculateCrc8(bufferTlm, TLM_LENGTH-1));
    
    if(tlmData.crc8)
    {
        printf("No error");
    }
    else{
        printf("CRC error");
    }
  }
    else{
    interrupts();
}
}
void resetTlmFlag() {
  flagTlm = false;
}
bool isTlmAvailable() {
  return flagTlm;
}
uint16_t getRpm() {
  return tlmData.rpm;
}
void enableTlm() {
  if (!requestTlm) {
    noInterrupts();
    requestTlm = true;
    interrupts();
  }
}
void disableTlm() {
  if (requestTlm) {
    noInterrupts();
    requestTlm = false;
    interrupts();
  }
}
uint8_t update_crc8(uint8_t crc, uint8_t crc_seed){
        uint8_t crc_u, i;
        crc_u=crc;
        crc_u^=crc_seed;
        for(i=0;i<8;i++)crc_u=(crc_u & 0x80) ? 0x7 ^(crc_u<<1):(crc_u<<1);
        return(crc_u);
    }
    uint8_t get_crc8(uint8_t *Buf, uint8_t BufLen)
    {
        uint8_t crc=0,i;
        for(i=0;i<BufLen;i++)crc=update_crc8(Buf[i],crc);\
        return(crc);
    }
